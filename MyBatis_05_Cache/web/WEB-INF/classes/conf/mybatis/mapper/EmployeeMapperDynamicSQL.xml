<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.hxy.mybatis.dao.EmployeeMapperDynamicSQL">
    <!--
        if：判断
        choose(when,otherwise)：分支选择 ：带了break的switch-case
            如果带了id就用id去查，如果带了lastName就用lastName去查；只会进入其中一个
        trim(where(封装查询条件),set(封装修改条件))：字符串截取
        foreach
    -->
    <!--查询员工，要求，携带了哪个字段查询条件就带上这个字段的值-->
    <!-- public List<Employee> getEmpsByConditionIf(Employee employee);-->
    <select id="getEmpsByConditionIf" resultType="emp">
        select * from tb1_employee
        <!--
            test:判断表达式(OGNL):参照ppt或者官方文档
                类似于： c:if  test
                遇见特殊符号应该去写转义字符
        -->
        <where>
            <if test="id != null">
                 id = #{id}
            </if>
            <if test="lastName != null and lastName != ''">
                and last_name like #{lastName}
            </if>
            <if test="email != null and email.trim() != ''">
                and email = #{email}
            </if>
            <!--ognl会进行字符串与数字的转换判断   "0"==0-->
            <if test="gender==0 or gender==1">
                and gender = #{gender}
            </if>
        </where>
    </select>

    <!--public List<Employee> getEmpsByConditionTrim(Employee employee);-->
    <select id="getEmpsByConditionTrim" resultType="emp">
        select * from tb1_employee
        <!--
            后面多出的and或者or where标签不能解决
            trim:
                prefix:前缀   trim标签体中是整个字符串拼串后的结果
                    prefix给拼接后的串加一个前缀
                prefixOverrides:前缀覆盖
                        去掉整个字符串前面多余的字符
                suffix:后缀    给拼接后的串加一个后缀
                suffixOverrides:后缀覆盖
                         去掉整个字符串后面多余的字符
        -->
        <!--自定义字符串的截取规则-->
        <trim prefix="where" suffixOverrides="and">
            <if test="id != null">
                id = #{id} and
            </if>
            <if test="lastName != null and lastName != ''">
                last_name like #{lastName} and
            </if>
            <if test="email != null and email.trim() != ''">
                email = #{email} and
            </if>
            <!--ognl会进行字符串与数字的转换判断   "0"==0-->
            <if test="gender==0 or gender==1">
                gender = #{gender}
            </if>
        </trim>
    </select>

    <!--public List<Employee> getEmpsByConditionChoose(Employee employee);-->
    <select id="getEmpsByConditionChoose" resultType="emp">
        select * from tb1_employee
        <where>
            <choose>
                <when test="id != null">
                    id = #{id}
                </when>
                <when test="lastName != null">
                    last_name like #{lastName}
                </when>
                <when test="email != null">
                    email = #{email}
                </when>
                <otherwise>
                    gender = 0
                </otherwise>
            </choose>
        </where>
    </select>

    <!-- public void updateEmp(Employee employee);-->
    <update id="updateEmp" >
        update tb1_employee
        <set>
            <if test="lastName != null">
                last_name = #{lastName},
            </if>
            <if test="email != null">
                email = #{email},
            </if>
            <if test="gender != null">
                gender = #{gender}
            </if>
        </set>
        where id = #{id}
    </update>

    <!--public List<Employee> getEmpsByConditionForeach(List<Integer> ids);-->
    <select id="getEmpsByConditionForeach" resultType="emp">
        select * from tb1_employee
        <!--
           foreach:
                collection:指定要遍历的集合
                    list类型参数会特殊处理封装在map中，map的key就叫list
                item：将当前遍历出的元素赋值给指定的变量
                    #{变量名}就能取出变量的值也就是当前遍历出的元素
                separator：每个元素之间的分隔符
                open：遍历出所有结果拼接一个开始的字符
                close：遍历出所有结果拼接一个结束的字符
                index：索引。遍历list的时候是索引，item就是当前值
                            遍历map的时候index表示的就是map的key，item就是map的值
        -->
        <foreach collection="ids" item="item_id" separator=","
                 open="where id in(" close=")">
            #{item_id}
        </foreach>
    </select>

    <!--批量保存-->
    <!--public void addEmps(@Param("emps") List<Employee> employees);-->
    <!--MySQL 下批量保存：可以foreach遍历 mysql支持values(),(),()语法-->
    <!--<insert id="addEmps">
        insert into tb1_employee(last_name, email,gender,d_id)
        values
        <foreach collection="emps" item="emp" separator=",">
            (#{emp.lastName},#{emp.email},#{emp.gender},#{emp.department.id})
        </foreach>
    </insert>-->
    <!--这种方式需要数据库链接属性 allowMultiQueries=true-->
    <insert id="addEmps">
        <foreach collection="emps" item="emp" separator=";">
            insert into tb1_employee (
              <include refid="insertColumn">
                  <property name="testColumn" value="ppp"></property>
              </include>
            )
            values (#{emp.lastName},#{emp.gender},#{emp.email},#{emp.department.id})
        </foreach>
    </insert>

    <!--
        两个内置参数：
            不只是方法传递过来的参数可以被用来判断，取值。。。
            mybatis默认还有两个内置参数：
            _parameter:代表整个参数
                单个参数：_parameter就是这个参数
                多个参数：参数会被封装成为一个map；_parameter就是代表这个map
            _databaseId:如果配置了databaseIdProvider标签
                _databaseId就是代表当前数据库的别名
    -->
    <!-- public List<Employee> getEmpsTestInnerParameter(Employee employee);-->
    <select id="getEmpsTestInnerParameter" resultType="emp">
        <!--
            bind:可以将OGNL表达式的值绑定到一个变量中，方便后来引用这个变量的值
        -->
       <!-- <bind name="_lastName" value="'%'+lastName+'%'" />-->
        <if test="_databaseId=='mysql'">
            select * from tb1_employee
            <if test="_parameter != null">
                where last_name like #{lastName}
            </if>
        </if>
        <if test="_databaseId=='oracle'">

        </if>
    </select>

    <!--
        sql:抽取可重用的sql片段，方便后面引用
        1.经常将要查询的列名，或者插入用的列名抽取出来方便使用
        2.include来引用已经抽取的
        3.include还可以自定义一些property，sql标签内部就能使用自定义的属性
            ${property},正确的取值方式
            #{}不能使用这种方式
    -->
    <sql id="insertColumn">
        last_name, gender,email,d_id
    </sql>
</mapper>